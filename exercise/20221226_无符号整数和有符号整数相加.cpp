//日期：20221226
//内容：无符号整数与有符号整数相加问题
#include <iostream>
#include <stdio.h>

using namespace std;

int main()
{
    unsigned int a = 6;
    int b = -20;

    (a + b > 6) ? puts("a + b > 6") : puts("a + b <= 6");
    printf("a + b = %d\n", a + b);  //a + b = -14
    printf("a + b = %ud\n", a + b); //a + b = 4294967282d(末尾的d表示无符号整数)
    cout << "a + b = " << a + b << endl;      //a + b = 4294967282(这下知道了默认的格式是无符号整数)
    /*
    有符号整数与无符号整数相加，系统会自动将有符号整数转换为【无符号整数】，在计算机中以补码的形式进行运算
    数字在计算机中以补码的形式存储，正数：原码 = 反码 = 补码，负数：反码 = 原码除符号位外取反，补码 = 反码加一(下面以32位系统为例)
      6：补码：0000 0000 0000 0000 0000 0000 0000 0110
    -20：原码：1000 0000 0000 0000 0000 0000 0001 0100(最高位为符号位，0表示正数、1表示负数)
        反码: 1111 1111 1111 1111 1111 1111 1110 1011
        补码：1111 1111 1111 1111 1111 1111 1110 1100
    6与-20的补码相加为1111 1111 1111 1111 1111 1111 1111 0010
    如果将上述补码解释为无符号整数的话将是一个很大整数，对应%ud输出格式；而将其解释为有符号整数的话就是一个负数，对应%d输出格式
    */

    return 0;
}