//日期：20221126
//内容：运算符优先级：圆括号 > 方括号 > 取内容运算符
//首先和圆括号结合，一定是函数；首先和方括号结合，一定是数组；首先和取内容运算符结合，一定是指针
//数组->指针：存放指针的数组；指针->数组：指向数组的指针；指针->函数：函数指针：先出现的是主语，后出现的是定语
#include <iostream>

using namespace std;

int main()
{
    //数组名是地址，是数组中第一个元素的地址，而不是数组的地址
    int a[3] = {1, 2, 3};
    int *pa = a;
    int b[3] = {4, 5, 6};
    int *pb = b;
    int c[3] = {7, 8, 9};
    int *pc = c;

    //圆括号 > 方括号 > 取内容运算符(这一点特别重要)
    int *p1[3] = {pa, pb, pc}; //方括号的优先级要高，因此p1是存放指向int类型的指针的数组
    int (*p2)[3] = &a; //圆括号的优先级最高，因此p2是指向数组的指针，注意与`int *pa = a;`相区别

    cout << a << ' ' << pa << endl; //a与pa都指向数组a中的第一个元素，因此输出相同均为该元素的地址

    cout << *(a + 1) << ' ' << *(pa + 1) << endl; //a+1与pa+1都指向数组a中的第二个元素，又有取内容运算符，因此输出该元素本身

    cout << p1 << ' ' << p1 + 1 << endl; //p1也是一个数组，p1本身指向该数组中第一个元素pa，因此前者输出pa的地址
    //但是在本系统一个指针变量(int* 类型)占八个字节，因此p1+1输出指向下一个八字节的起始地址
    cout << *p1 << ' ' << *(p1 + 1) << endl; //p1指向该数组中第一个元素pa，又有取内容运算符，因此前者输出pa的内容，即数组a中第一个元素的地址
    //p1+1指向下一个八字节的起始地址，即pb变量，又有取内容运算符，因此*(p1+1)输出pb的内容，即数组b中第一个元素的地址
    cout << **p1 << ' ' << **(p1 + 1) << endl; //分别输出数组a与数组b中第一个元素的内容

    cout << p2 << ' ' << p2 + 1 << endl; //p2是指向数组a的指针，当对数组名取地址时，将输出整个数组的地址，因此p2+1将指向下一个十二字节的起始地址
    cout << *p2 << ' ' << **p2 << endl; //(*p2 = a)，因此前者输出数组a中第一个元素的地址，而后者输出数组a中第一个元素的内容
    cout << *p2 + 1 << ' ' << **p2 + 1 << endl; //(*p2 = a)，因此前者输出数组a中第二个元素的地址，而后者输出数组a中第一个元素的内容加一

    return 0;
}